diff -uprN "\344\270\213\350\275\275/mondrian-4.4/src/main/java/mondrian/rolap/RolapSchema.java" project/mondrian-4.4/src/main/java/mondrian/rolap/RolapSchema.java
--- "\344\270\213\350\275\275/mondrian-4.4/src/main/java/mondrian/rolap/RolapSchema.java"	2016-05-31 23:10:19.000000000 +0800
+++ project/mondrian-4.4/src/main/java/mondrian/rolap/RolapSchema.java	2016-11-24 21:19:41.069439014 +0800
@@ -1897,6 +1897,16 @@ public class RolapSchema extends OlapEle
                 PhysTable table,
                 RolapConnection connection);
         }
+
+        private Map<String, String> joinInfoMap = new HashMap<String, String>();
+
+        public void addJoinInfo(String joinCondition, String joinType){
+            this.joinInfoMap.put(joinCondition, joinType);
+        }
+
+        public Map getJoinInfoMap(){
+            return joinInfoMap;
+        }
     }
 
     /**
diff -uprN "\344\270\213\350\275\275/mondrian-4.4/src/main/java/mondrian/rolap/RolapSchemaLoader.java" project/mondrian-4.4/src/main/java/mondrian/rolap/RolapSchemaLoader.java
--- "\344\270\213\350\275\275/mondrian-4.4/src/main/java/mondrian/rolap/RolapSchemaLoader.java"	2016-05-31 23:10:19.000000000 +0800
+++ project/mondrian-4.4/src/main/java/mondrian/rolap/RolapSchemaLoader.java	2016-11-24 21:17:25.203085841 +0800
@@ -1025,6 +1025,54 @@ public class RolapSchemaLoader {
         return physView;
     }
 
+    private void addJoinConditions(RolapSchema.PhysTable physTable){
+        for(MondrianDef.Cube cube : ((MondrianDef.Schema)validator.getXml(schema)).getCubes()){
+            for(MondrianDef.Join join : cube.getJoins()){
+                MondrianDef.JoinTable table1 = join.childArray[0];
+                MondrianDef.JoinTable table2 = join.childArray[1];
+                List<String> conditions = new ArrayList<String>();
+                MondrianDef.Column[] columns1 = table1.array;
+                MondrianDef.Column[] columns2 = table2.array;
+                for(int i=0; i<table1.array.length; i++){
+                    conditions.add("\"" + table1.getTableName() + "\".\"" + columns1[i].name + "\" = \"" + table2.getTableName() + "\".\"" + columns2[i].name + "\"");
+                }
+                List<String> allConditions = new ArrayList<String>();
+                Permutation.arrange(conditions, 0, conditions.size(), allConditions);
+                for(String condition : allConditions) {
+                    physTable.addJoinInfo(condition, join.getJoinType());
+                }
+            }
+        }
+    }
+    static class Permutation {
+        public static void swap(List<String> str, int i, int j) {
+            String temp = new String();
+            temp = str.get(i);
+            str.set(i, str.get(j));
+            str.set(j, temp);
+        }
+
+        public static void arrange(List<String> str, int st, int len, List<String> result) {
+            if (st == len - 1) {
+                StringBuffer sb = new StringBuffer();
+                for (int i = 0; i < len; i++) {
+                    if(i != (len - 1))
+                        sb.append(str.get(i) + " and ");
+                    else
+                        sb.append(str.get(i));
+                }
+                result.add(sb.toString());
+            } else {
+                for (int i = st; i < len; i++) {
+                    swap(str, st, i);
+                    arrange(str, st + 1, len, result);
+                    swap(str, st, i);
+                }
+            }
+
+        }
+    }
+
     private RolapSchema.PhysTable registerTable(
         Handler handler,
         Dialect dialect,
@@ -1043,6 +1091,8 @@ public class RolapSchemaLoader {
                 buildHintMap(xmlTable.getHints()));
         validator.putXml(physTable, xmlTable);
 
+        addJoinConditions(physTable);
+
         if (xmlTable instanceof MondrianDef.AutoGeneratedDateTable) {
             registerAutoDateTable(handler, xmlTable, physTable);
             physTable.ensurePopulated(this, xmlTable);
diff -uprN "\344\270\213\350\275\275/mondrian-4.4/src/main/java/mondrian/rolap/sql/SqlQuery.java" project/mondrian-4.4/src/main/java/mondrian/rolap/sql/SqlQuery.java
--- "\344\270\213\350\275\275/mondrian-4.4/src/main/java/mondrian/rolap/sql/SqlQuery.java"	2016-05-31 23:10:19.000000000 +0800
+++ project/mondrian-4.4/src/main/java/mondrian/rolap/sql/SqlQuery.java	2016-11-25 10:03:55.452185548 +0800
@@ -99,6 +99,10 @@ public class SqlQuery {
 
     private int joinCount;
 
+    private Map<String, String> joinInfoMap = null;
+
+    private String joinType = new String();
+
     /** The SQL dialect this query is to be generated in. */
     private final Dialect dialect;
 
@@ -374,6 +378,9 @@ public class SqlQuery {
                 (alias == null)
                 ? table.getAlias()
                 : alias;
+            joinInfoMap = ((RolapSchema.PhysTable) relation).getJoinInfoMap();
+            if(joinInfoMap.containsKey(joinCondition))
+                joinType = joinInfoMap.get(joinCondition);
             return addFromTable(
                 table.getSchemaName(),
                 table.getName(),
@@ -580,7 +587,7 @@ public class SqlQuery {
         final String first = distinct ? "select distinct " : "select ";
         select.toBuffer(buf, generateFormattedSql, prefix, first, ", ", "", "");
         groupingFunctionsToBuffer(buf, prefix);
-        String fromSep = joinCount > 0 ? " join " : ", ";
+        String fromSep = joinCount > 0 ? " " + joinType + " join " : ", ";
         if (dialect.allowsJoinOn() && from.size() > 1) {
             if (joinCount <= 0) {
                 throw new AssertionError();
diff -uprN "\344\270\213\350\275\275/mondrian-4.4/src/main/xom/mondrian/olap/MondrianSchema.xml" project/mondrian-4.4/src/main/xom/mondrian/olap/MondrianSchema.xml
--- "\344\270\213\350\275\275/mondrian-4.4/src/main/xom/mondrian/olap/MondrianSchema.xml"	2016-05-31 23:10:19.000000000 +0800
+++ project/mondrian-4.4/src/main/xom/mondrian/olap/MondrianSchema.xml	2016-11-25 11:13:11.685528828 +0800
@@ -927,7 +927,8 @@ version 3.x schemas.</p>
                     MeasureGroups.class,
                     Dimensions.class,
                     CalculatedMembers.class,
-                    NamedSets.class)
+                    NamedSets.class,
+                    Joins.class)
                 {
                     CubeElement[] getArray() {
                         return childArray == null ? EMPTY : childArray;
@@ -951,6 +952,9 @@ version 3.x schemas.</p>
             public NamedList<Annotation> getAnnotations() {
                 return children.only(Annotations.EMPTY).list();
             }
+            public NamedList<Join> getJoins() {
+                return children.only(Joins.EMPTY).list();
+            }
             ]]>
         </Code>
     </Element>
@@ -3915,6 +3919,134 @@ PARENT&#160;&#160;&#160;&#160;CHILD&#160
     // turn, to an intermediate dimension table to which the fact table is
     // joined".
     -->
+    <Element type="Joins" class="Holder,CubeElement">
+        <Doc>
+            Array of Joins.
+
+            The dimension table is joined to
+            an intermediate fact table. The intermediate fact table is joined, in
+            turn, to an intermediate dimension table to which the fact table is
+            joined
+        </Doc>
+        <Array name="array" type="Join"/>
+        <Code>
+            <![CDATA[
+            private static final Joins EMPTY;
+            static {
+                EMPTY = new Joins();
+                EMPTY.array = new Join[0];
+            }
+            public Joins copy() {
+                Joins c = new Joins();
+                c.array = array.clone();
+                return c;
+            }
+            public NamedList<Join> list() {
+                return new NamedListImpl<Join>(
+                    new MutableArrayList<Join>() {
+                        protected Join[] getArray() {
+                            return array == null ? EMPTY.array : array;
+                        }
+                        protected void setArray(Join[] ts) {
+                            array = ts;
+                        }
+                    }
+                );
+            }
+            ]]>
+        </Code>
+    </Element>
+
+    <Element type="Join" class="NamedElement">
+        <Doc>
+            <p>
+                the join detail info
+            </p>
+        </Doc>
+        <Attribute name="name" required="false">
+            <Doc>
+                Name of this Attribute.
+            </Doc>
+        </Attribute>
+        <Attribute name="joinType" required="false" default="inner">
+            <Doc>
+                join type , default inner
+            </Doc>
+            <Value>inner</Value>
+            <Value>left</Value>
+            <Value>right</Value>
+        </Attribute>
+        <Array name="childArray" type="JoinTable"></Array>
+        <Code><![CDATA[
+            public String getNameAttribute() {
+                return name;
+            }
+            private static final JoinTable[] EMPTY = new JoinTable[2];
+            public final Children<JoinTable> children =
+                new Children<JoinTable>(
+                    JoinTable.class)
+                {
+                    JoinTable[] getArray() {
+                        if(childArray != null && childArray.length == 2)
+                           return childArray;
+                        else return EMPTY;
+                    }
+                    void setArray(JoinTable[] ts) {
+                        if(ts.length == 2)
+                            childArray = ts;
+                    }
+                };
+            public String getJoinType(){
+                return joinType;
+            }
+        ]]>
+        </Code>
+    </Element>
+
+    <Element type="JoinTable" class="NamedElement">
+        <attribute name="name" required="false">
+
+        </attribute>
+        <attribute name="tableName" required="true">
+
+        </attribute>
+        <Array name="array" type="Column"/>
+        <Code>
+            <![CDATA[
+            public String getNameAttribute() {
+                return name;
+            }
+            public String getTableName(){
+                return tableName;
+            }
+            private static final JoinTable EMPTY;
+            static {
+                EMPTY = new JoinTable();
+                EMPTY.array = new Column[0];
+            }
+            public JoinTable copy() {
+                JoinTable c = new JoinTable();
+                c.array = array.clone();
+                return c;
+            }
+            public List<Column> list() {
+                return new MutableArrayList<Column>() {
+                    protected Column[] getArray() {
+                        return array == null ? EMPTY.array : array;
+                    }
+                    protected void setArray(Column[] ts) {
+                        array = ts;
+                    }
+                };
+            }
+            protected static Column[] foo(String column, String table, Columns columns) {
+                return columns != null ? columns.array.clone()
+                    : column != null ? new Column[] {new Column(table, column)}
+                    : null;
+            }
+            ]]>
+        </Code>
+    </Element>
 
     <!--
     // TODO: Define ReferencedDimensionLink extends DimensionLink.
